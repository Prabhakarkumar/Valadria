package {	    import flash.display.Sprite;    import flash.events.*;    import flash.external.ExternalInterface;	import flash.media.Sound;    import flash.utils.Timer;	import flash.net.URLLoader;	import flash.net.URLRequest;    public class external_interface extends Sprite {		private var channels:Object = {};		private var sounds:Object = {};		/**		 * external_interface constructor		 * @member external_interface		 * @constructor		 * @public		 * @return {void}		 */        public function external_interface():void {            if (ExternalInterface.available) {                try {					ExternalInterface.addCallback('load', load);					ExternalInterface.addCallback('play', play);					ExternalInterface.addCallback('stop', stop);/*                    if (!isJavaScriptReady()) {                        var readyTimer:Timer = new Timer(100, 0);                        readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);                        readyTimer.start();                    }*/                } catch (e:SecurityError) {                    trace('A SecurityError occurred: ' + e.message);                } catch (e:Error) {                    trace('An Error occurred: "'+ e.message);                }            } else {                trace('External interface is not available for this container.');            }        }		/**		 * Checks if JavaScript is ready.		 * @member external_interface		 * @method isJavaScriptReady		 * @private		 * @return {Boolean} true if JavaScript is ready, otherwise false.		 */        private function isJavaScriptReady():Boolean {            var isReady:Boolean = ExternalInterface.call('isReady');            return isReady;        }		/**		 * Loads a Sound file		 * @member external_interface		 * @method load		 * @private		 * @return {void}		 */		private function load(id:String, url:String):void {			sounds[id] = new Sound(new URLRequest(url));        }		/**		 * Plays a sound.		 * @member external_interface		 * @method play		 * @private		 * @return {void}		 */		private function play(id:String):void {			channels[id] = sounds[id].play();        }				/**		 * Stops a sound from playing.		 * @member external_interface		 * @method stop		 * @private		 * @return {void}		 */		private function stop(id:String):void {			if (id in channels) channels[id].stop();        }		/**		 * Handles changes in the timer.		 * @member external_interface		 * @method timerHandler		 * @private		 * @return {void}		 */		 /*        private function timerHandler(event:TimerEvent):void {            var isReady:Boolean = isJavaScriptReady();            if (isReady) {                //output.appendText("JavaScript is ready.\n");                Timer(event.target).stop();            }        };		*/    }}